#define RS RD2
#define EN RD3
#define D4 RD4
#define D5 RD5
#define D6 RD6
#define D7 RD7
#define _XTAL_FREQ 8000000
#include <xc.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <pic16f887.h>

#include "lcd.h"

// CONFIG1
#pragma config FOSC = INTRC_CLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = ON       // Power-up Timer Enable bit (PWRT enabled)
#pragma config MCLRE = ON       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

void main(void) {
    OSCCONbits.IRCF = 0b111;
    OSCCONbits.SCS = 0b00;
    ANSEL = 0B00000001;
    ANSELH = 0x00;
    ADCON0bits.ADON = 1;
    ADCON0bits.GO_nDONE = 0;
    ADCON0bits.CHS = 0000;
    ADCON0bits.ADCS = 10;
    ADCON1bits.ADFM = 1;
    ADCON1bits.VCFG0 = 0;
    ADCON1bits.VCFG1 = 0;
    TRISA = 0b00000001;
    TRISD = 0x00;
    TRISB = 0b00000000;
    PORTD = 0b00000000;
    PORTB = 0b00000000;

    int adc = 0;
    float val;
    char s[20];
    Lcd_Init();
    
    while (1) {
        ADCON0bits.GO_nDONE = 1;
        while (ADCON0bits.GO_nDONE) {
            adc = ADRESH;
            adc=adc<<8;
            adc=adc+ADRESL;
            //val=(adc*100)/255;
            val=(-0.195*adc)+204.3;
            Lcd_Clear();
            Lcd_Set_Cursor(1, 1);
            Lcd_Write_String("HUMEDAD");
            Lcd_Set_Cursor(2, 1);
            sprintf(s, "VALOR= %f", val);
            Lcd_Write_String(s);
            __delay_ms(300);  
        }
         
    }
    return;
}
